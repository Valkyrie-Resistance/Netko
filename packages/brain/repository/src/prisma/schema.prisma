generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ModelProvider {
  OPENAI
  OPENROUTER
  OLLAMA
  CUSTOM
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  threads       Thread[]
  assistant     Assistant[]
  message       Message[]
  sharedChat    SharedChat[]
  apiKeys       UserApiKey[]

  @@unique([email])
  @@map("user")
}

model UserApiKey {
  id           String        @id @default(cuid(2))
  provider     ModelProvider
  encryptedKey String // Encrypted API key
  isActive     Boolean       @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lastUsedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider])
  @@index([userId, provider])
  @@map("user_api_key")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model LLMModel {
  id          String        @id @default(cuid(2))
  name        String // e.g., "gpt-4o", "claude-3-sonnet"
  provider    ModelProvider
  displayName String // User-friendly name
  description String? // Model capabilities/description
  isActive    Boolean       @default(true)
  isDefault   Boolean       @default(false) // Default model for provider

  messages Message[]
  threads  Thread[]

  @@unique([provider, name])
  @@index([provider, isActive])
  @@map("llm_model")
}

model Assistant {
  id           String  @id @default(cuid(2))
  name         String
  description  String?
  systemPrompt String
  isPublic     Boolean @default(false)

  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  threads  Thread[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assistant")
}

model Thread {
  id    String  @id @default(cuid())
  title String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  currentModelId String?
  currentModel   LLMModel? @relation(fields: [currentModelId], references: [id])

  parentId String?
  parent   Thread?  @relation("ThreadBranches", fields: [parentId], references: [id])
  branches Thread[] @relation("ThreadBranches")

  messages    Message[]
  sharedChats SharedChat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(name: "threadCompoundId", [id, userId])
  @@index([createdAt, id])
  @@index([userId])
  @@index([parentId])
  @@map("thread")
}

model Message {
  id      String      @id @default(cuid(2))
  content String
  role    MessageRole

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  assistantId String?
  assistant   Assistant? @relation(fields: [assistantId], references: [id])

  modelId String?
  model   LLMModel? @relation(fields: [modelId], references: [id])

  parentId String?
  parent   Message?  @relation("MessageBranches", fields: [parentId], references: [id])
  branches Message[] @relation("MessageBranches")

  metadata Json?

  createdAt DateTime @default(now())

  @@unique(name: "messageCompoundId", [id, threadId])
  @@index([threadId])
  @@index([parentId])
  @@index([createdAt, id])
  @@map("message")
}

model SharedChat {
  id      String @id @default(cuid(2))
  shareId String @unique @default(cuid(2))

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  sharedById String
  sharedBy   User   @relation(fields: [sharedById], references: [id])

  shareUpToMessageId String?
  isPublic           Boolean   @default(true)
  expiresAt          DateTime?

  createdAt DateTime @default(now())

  @@index([shareId])
  @@map("shared_chat")
}

model jwks {
  id         String   @id @default(uuid())
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())

  @@map("jwks")
}
